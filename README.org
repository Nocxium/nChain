#+options: \n:t

* nChain
** What is nChain
nChain is a theme changer for Linux, with a focus on being very flexible and without any special dependancies (Outside of the basic Linux tools).
It works by creating and removing links to your files each time you change a theme.

nChain can be used with many lauchers, such as Rofi, dmenu, Wofi. Or you could just run it directly from the terminal.

nChain should work on most, if not all linux environments. Im using NixOS with hyprland myself, although I've used it with Arch and Debian as well.

** Important notes
Even though I've programmed nChain to not remove any files unless they are links, and to not remove folders that aren't empty, I still HIGHLY suggest that you backup your data before trying out these scripts. When you try it out for the first time, just add a single folder with a file inside of your theme to see that it works as you expect it to.

Use nChain at your own risk.

Additionally, don't include any spaces in your theme names.

** Installation
Clone the repo to your home/.config folder.

#+begin_src shell
git clone git@github.com:Nocxium/nChain.git $HOME/.config
#+end_src

Run chmod +x on all the .sh files, as well as the nChain file.

#+begin_src shell
cd $HOME/.config/nChain
chmod +x nChain
chmod +x scripts/*
#+end_src

Move the nChain file to /usr/bin/ (Unless you are on NixOS)

#+begin_src shell
sudo mv nChain /usr/bin/
#+end_src

If you aren't a nix user you can ignore/remove the nChain.nix file.

For nix users, you can either follow the above steps (but add the nChain file to your path in another location), or just use the nChain.nix file with your config instead of using the regular nChain (bash) file.
** How to use it
*** File structure
If you have ever used stow to manage your dotfiles, you will feel right at home. The structure is very similar. If not, watch the example below. It is quite staightforward once you wrap your head around it.

All themes go under the theme folder, and optional scripts under the script folder.

You shouldnt touch the links folder. nChain uses that to store paths to linked files
**** Structure example
The the structure looks like this:
#+begin_src shell
.
├── links
├── scripts
│   ├── linkGen.sh
│   └── settings.sh
└── themes
    ├── theme1
    ├── theme2
    └── theme3
#+end_src

You start by creating a folder with your themes name inside the "themes" folder.

IMPORTANT! Theme names can't include a space.

Once you are inside your theme folder, you should see it as the base of your home folder.

If you for example want to change the dunst, kitty and waybar config for each theme, the tree structure could look like this:

#+begin_src shell
├── links
├── scripts
│   ├── linkGen.sh
│   └── settings.sh
└── themes
    ├── theme1
    │   └── .config
    │       ├── dunst
    │       │   └── dunstrc
    │       ├── kitty
    │       │   └── theme.conf
    │       └── waybar
    │           ├── config.jsonc
    │           └── style.css
    ├── theme2
    │   └── .config
    │       ├── dunst
    │       │   └── dunstrc
    │       ├── kitty
    │       │   └── theme.conf
    │       └── waybar
    │           ├── config.jsonc
    │           └── style.css
    └── theme3
        └── .config
            ├── dunst
            │   └── dunstrc
            ├── kitty
            │   └── theme.conf
            └── waybar
                ├── config.jsonc
                └── style.css

#+end_src

As you can see, inside each of your theme folder, you are treating it as your home folder, and navigating to the rofi config folder with .config/rofi

If you for example change to theme1 now, its config files will now be symlinked to your homefolders .config folder. If you change it to theme2, nChain will unlink theme1 files, and now link your theme2 files.

If you want more examples, I suggest watching videos on youtube about stow and dotfiles, since they follow the same filestructure.


*** Configuration
If you open settings.sh in the script folder, you will see the following:
#+begin_src shell
launcher="rofi -dmenu -i -p 'Select theme:'"

folders_to_skip=(
  # "folder_one"
  # "folder_two"
)

pre_commands=(
  # These commands are running before the theme change'"
)

post_commands=(
  # Optional commands to run after the theme change. Put each command inside "". Here are some examples:
  # "pkill -f waybar"
  # "waybar &"
  # "swww img $HOME/Pictures/Wallpapers/currentWallpaper-1 --transition-type wipe --transition-fps 60"
  # "$HOME/.config/nChain/scripts/gsettings.sh &"
  # "killall .dunst-wrapped"
  # "kill -SIGUSR1 $(pidof kitty)"
)

# Define optional categories and subcategories
declare -A categories
categories=(
  # ["Flower"]="Autumn Chiaroscuro Winter-green"
  # ["Experiment"]="Fern Leaf-seasons MoonScape Snowy-Umbrella Trippy-Mountain Yellow-haze"
)

#+end_src

The file should be pretty self-explanitory, but to give some additional information:

folders_to_skip should contain any optional folders in "themes" folder that you dont want included in your launcher. Wildcards are accepted.

If you have a theme that you want to run different post_commands with, you can just create a file called "your_theme_name.sh", and that sh file will be used as your post_commands instead. Don't forget to chmod +x that file.

nChain also allows you to put different themes in different categories for your launcher. Put the name of the category inside the brackets, and then the name of the themes after the equal sign.
